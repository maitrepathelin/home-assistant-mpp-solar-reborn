[
    {
        "id": "df063c9c3211a70d",
        "type": "tab",
        "label": "Flux 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "284e0f7548c95147",
        "type": "inject",
        "z": "df063c9c3211a70d",
        "name": "Déclencheur manuel",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "3c2dafd038a2d341"
            ]
        ]
    },
    {
        "id": "1bfeafe4935d3661",
        "type": "http request",
        "z": "df063c9c3211a70d",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "http://192.168.56.1:8020",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 240,
        "wires": [
            [
                "22b81ccc2a5381d0",
                "cb0296e1e768a129"
            ]
        ]
    },
    {
        "id": "3c2dafd038a2d341",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "MUCHGC010",
        "func": "msg.payload = \"wsl /home/maitrepathelin/venv/bin/mpp-solar -p /dev/ttyUSB0 -P PI30 -c MUCHGC010\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 320,
        "wires": [
            [
                "f9c1bdab10d3c20e"
            ]
        ]
    },
    {
        "id": "22b81ccc2a5381d0",
        "type": "debug",
        "z": "df063c9c3211a70d",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 140,
        "wires": []
    },
    {
        "id": "cb0296e1e768a129",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "ACK ou non",
        "func": "var response = msg.payload; // Obtient la réponse de la commande REST\n\n// Log la réponse pour le débogage\nnode.warn(\"Réponse reçue : \" + response);\n\n// Initialise la variable pour l'état de l'alerte\nvar alertState = 0; // 0 signifie pas d'alerte, 1 signifie alerte\n\n// Vérifie si \"ACK\" est dans la réponse\nif (response.indexOf(\"ACK\") === -1) {\n    // Si \"ACK\" n'est pas trouvé, prépare le message d'alerte\n    msg.payload = 1;\n    alertState = 1; // Met l'état de l'alerte à 1\n    node.warn(\"ACK non trouvé dans la réponse\"); // Log un avertissement\n    // Ne retourne pas ici pour permettre la mise à jour de Home Assistant\n} else {\n    node.warn(\"ACK trouvé dans la réponse\"); // Confirme que \"ACK\" est trouvé\n    // Si vous voulez réinitialiser l'état dans Home Assistant quand tout va bien\n    alertState = 0; \n    msg.payload = 0;\n}\n\n// Ajoute l'état de l'alerte au message\nmsg.alertState = alertState;\n\nreturn msg; // Passe le message au node suivant pour action\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 300,
        "wires": [
            [
                "909213d5c056a468"
            ]
        ]
    },
    {
        "id": "909213d5c056a468",
        "type": "ha-binary-sensor",
        "z": "df063c9c3211a70d",
        "name": "Défaut de commande Onduleur",
        "entityConfig": "bd2504bd41d24d3a",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1070,
        "y": 360,
        "wires": [
            [
                "d2dcd2fea6b3db58"
            ]
        ]
    },
    {
        "id": "8f968ca2db50e503",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "MUCHGC002",
        "func": "msg.payload = \"wsl /home/maitrepathelin/venv/bin/mpp-solar -p /dev/ttyUSB0 -P PI30 -c MUCHGC002\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 400,
        "wires": [
            [
                "f9c1bdab10d3c20e"
            ]
        ]
    },
    {
        "id": "c555802a051734af",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "QPIRI",
        "func": "msg.payload = \"wsl /home/maitrepathelin/venv/bin/mpp-solar -p /dev/ttyUSB0 -P PI30 -c QPIRI -o raw\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 480,
        "wires": [
            [
                "381e10c92b520e56"
            ]
        ]
    },
    {
        "id": "195057fba8cdc1e9",
        "type": "inject",
        "z": "df063c9c3211a70d",
        "name": "Déclencheur manuel",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "50889edebdba68e2"
            ]
        ]
    },
    {
        "id": "381e10c92b520e56",
        "type": "http request",
        "z": "df063c9c3211a70d",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "http://192.168.56.1:8020",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1070,
        "y": 460,
        "wires": [
            [
                "c6e7427e32e96867",
                "6a47ee400c192e43",
                "7699680657a9f81b"
            ]
        ]
    },
    {
        "id": "b5fa28f536af4fa5",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "Fx traitement réponse",
        "func": "// Fonction pour extraire les valeurs de la chaîne de réponse\nfunction extractValues(response) {\n    // Trouve le début de la chaîne de valeurs numériques\n    const start = response.indexOf('(') + 1;\n    // Détermine la fin de la chaîne de valeurs numériques\n    let end;\n    if (response.indexOf(']') > -1) {\n        // Si le caractère de fin est ']', utilisez-le pour trouver la fin\n        end = response.indexOf(']') - 1;\n    } else if (response.indexOf('\\\\') > -1) {\n        // Si le caractère de fin est '\\', utilisez-le pour trouver la fin\n        end = response.indexOf('\\\\') - 1;\n    } else {\n        // Si aucun caractère de fin attendu n'est trouvé, lance une erreur ou gère la situation différemment\n        throw new Error('Format de réponse inattendu.');\n    }\n    // Extrait la sous-chaîne contenant les valeurs\n    const valuesString = response.substring(start, end);\n    // Sépare les valeurs en utilisant l'espace comme séparateur\n    const values = valuesString.split(' ');\n    // Convertit chaque valeur en nombre, si possible\n    return values.map(value => isNaN(parseFloat(value)) ? value : parseFloat(value));\n}\n\n// Application de la fonction d'extraction au payload reçu\nmsg.payload = extractValues(msg.payload);\n\nreturn msg; // Renvoie le message avec le payload modifié\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "25d9087870f74a12",
        "type": "debug",
        "z": "df063c9c3211a70d",
        "name": "debug Résultat array QPIRI",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 460,
        "wires": []
    },
    {
        "id": "a624eaea231c70e4",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "sensor Ampère charge EDF",
        "entityConfig": "d49fada99457d97e",
        "version": 0,
        "state": "payload[13]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1600,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "50889edebdba68e2",
        "type": "trigger",
        "z": "df063c9c3211a70d",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-10",
        "extend": false,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 620,
        "y": 480,
        "wires": [
            [
                "c555802a051734af",
                "2e711f93dc682b24"
            ]
        ]
    },
    {
        "id": "ddf34592895a5056",
        "type": "inject",
        "z": "df063c9c3211a70d",
        "name": "STOP",
        "props": [
            {
                "p": "reset",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 640,
        "wires": [
            [
                "50889edebdba68e2",
                "c2a4ebe389672a21"
            ]
        ]
    },
    {
        "id": "d86e160e0ec786ea",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "msg reset",
        "func": "// Crée un message avec la propriété reset\nreturn { reset: true };\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 460,
        "wires": [
            [
                "50889edebdba68e2"
            ]
        ]
    },
    {
        "id": "d2dcd2fea6b3db58",
        "type": "delay",
        "z": "df063c9c3211a70d",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1280,
        "y": 360,
        "wires": [
            [
                "50889edebdba68e2"
            ]
        ]
    },
    {
        "id": "45ff4cbe219f5077",
        "type": "ha-button",
        "z": "df063c9c3211a70d",
        "name": "Onduleur Stop QPIRI",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "0596c020cc4a4ced",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "x": 100,
        "y": 480,
        "wires": [
            [
                "d86e160e0ec786ea"
            ]
        ]
    },
    {
        "id": "3954916552bdabba",
        "type": "ha-button",
        "z": "df063c9c3211a70d",
        "name": "Onduleur Start QPIRI",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "1be87c0da1a40936",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "x": 100,
        "y": 540,
        "wires": [
            [
                "50889edebdba68e2"
            ]
        ]
    },
    {
        "id": "4338a58ee222cadd",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur priorité de sortie",
        "entityConfig": "a2c5695485b2b9d8",
        "version": 0,
        "state": "payload[16]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1610,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "a87b9172f9573383",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur priorité de charge",
        "entityConfig": "1740fd483b60c743",
        "version": 0,
        "state": "payload[17]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1600,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "15c0db5f7ff00c69",
        "type": "ha-button",
        "z": "df063c9c3211a70d",
        "name": "Onduleur EDF uniquement",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "de49b6cfe3e8215a",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "x": 130,
        "y": 200,
        "wires": [
            [
                "67673498bc9a6518",
                "d86e160e0ec786ea"
            ]
        ]
    },
    {
        "id": "67673498bc9a6518",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "POP00 (EDF)",
        "func": "msg.payload = \"wsl /home/maitrepathelin/venv/bin/mpp-solar -p /dev/ttyUSB0 -P PI30 -c POP00\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 200,
        "wires": [
            [
                "f9c1bdab10d3c20e"
            ]
        ]
    },
    {
        "id": "84e4f153368386a0",
        "type": "ha-button",
        "z": "df063c9c3211a70d",
        "name": "Onduleur sortie SBU",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "c825c5f9725594e7",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "x": 150,
        "y": 140,
        "wires": [
            [
                "b89fd94a15edf9af",
                "d86e160e0ec786ea"
            ]
        ]
    },
    {
        "id": "b89fd94a15edf9af",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "POP02 (SBU)",
        "func": "msg.payload = \"wsl /home/maitrepathelin/venv/bin/mpp-solar -p /dev/ttyUSB0 -P PI30 -c POP02\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "f9c1bdab10d3c20e"
            ]
        ]
    },
    {
        "id": "f9c1bdab10d3c20e",
        "type": "delay",
        "z": "df063c9c3211a70d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 640,
        "y": 200,
        "wires": [
            [
                "1bfeafe4935d3661",
                "2e711f93dc682b24"
            ]
        ]
    },
    {
        "id": "80ce13fc4c6c3f75",
        "type": "debug",
        "z": "df063c9c3211a70d",
        "name": "debug Erreur comm USB",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 660,
        "wires": []
    },
    {
        "id": "c6e7427e32e96867",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "Fx traitement réponse v2",
        "func": "// Fonction pour extraire les valeurs de la chaîne de réponse\nfunction extractValues(response) {\n    // Trouve le début de la chaîne de valeurs numériques\n    const start = response.indexOf('(') + 1;\n    // Détermine la fin de la chaîne de valeurs numériques\n    let end;\n    if (response.indexOf(']') > -1) {\n        // Si le caractère de fin est ']', utilisez-le pour trouver la fin\n        end = response.indexOf(']') - 1;\n    } else if (response.indexOf('\\\\') > -1) {\n        // Si le caractère de fin est '\\', utilisez-le pour trouver la fin\n        end = response.indexOf('\\\\') - 1;\n    } else {\n        // Si aucun caractère de fin attendu n'est trouvé, envoie un message d'erreur\n        return {error: 'Format de réponse inattendu.'}; // Modification ici\n    }\n    // Extrait la sous-chaîne contenant les valeurs\n    const valuesString = response.substring(start, end);\n    // Sépare les valeurs en utilisant l'espace comme séparateur\n    const values = valuesString.split(' ');\n    // Convertit chaque valeur en nombre, si possible\n    const parsedValues = values.map(value => isNaN(parseFloat(value)) ? value : parseFloat(value));\n    return {payload: parsedValues}; // Assurez-vous de retourner un objet avec une propriété payload\n}\n\n// Application de la fonction d'extraction au payload reçu\nconst result = extractValues(msg.payload);\n\n// Vérifie si le résultat contient une erreur ou non\nif (result.error) {\n    // Envoyer l'erreur à la fonction de gestion des erreurs\n    return {payload: result.error, topic: \"error\"};\n} else {\n    // Aucune erreur, envoyer le payload modifié\n    msg.payload = result.payload;\n    return msg; // Renvoie le message avec le payload modifié\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 520,
        "wires": [
            [
                "25d9087870f74a12",
                "a624eaea231c70e4",
                "4338a58ee222cadd",
                "a87b9172f9573383",
                "eb23e061cc833d4e"
            ]
        ]
    },
    {
        "id": "eb23e061cc833d4e",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "Traitement erreur",
        "func": "let timeout; // Pour stocker la référence du délai d'attente\n\n// Vérifie si le message reçu est un message d'erreur\nif (msg.topic === \"error\") {\n    // Envoie un payload à 1 immédiatement pour indiquer une erreur\n    node.send({ payload: 1 });\n\n    // Réinitialise le délai d'attente s'il est déjà défini\n    if (timeout) clearTimeout(timeout);\n\n    // Définit un nouveau délai d'attente pour réinitialiser le payload après 20 secondes\n    //timeout = setTimeout(function () {\n    //    node.send({ payload: 0 }); // Envoie un payload à 0 après 20 secondes sans erreur\n    //}, 20000);\n} else {\n    // Si ce n'est pas un message d'erreur, ne fait rien\n    node.send({ payload: 0 }); // Envoie un payload à 0 après 20 secondes sans erreur\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 580,
        "wires": [
            [
                "51bfbbfb41d9252a"
            ]
        ]
    },
    {
        "id": "51bfbbfb41d9252a",
        "type": "ha-binary-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur Erreur comm USB",
        "entityConfig": "bf87f98f3c4cc3b3",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1320,
        "y": 660,
        "wires": [
            [
                "80ce13fc4c6c3f75"
            ]
        ]
    },
    {
        "id": "5072303c76843ce8",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "Set timeout",
        "func": "msg.httpRequestTimeout = 7000;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 320,
        "wires": [
            [
                "381e10c92b520e56",
                "1bfeafe4935d3661"
            ]
        ]
    },
    {
        "id": "6a47ee400c192e43",
        "type": "debug",
        "z": "df063c9c3211a70d",
        "name": "debug Status code HTTP",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 580,
        "wires": []
    },
    {
        "id": "75cfbce3d577d0ac",
        "type": "inject",
        "z": "df063c9c3211a70d",
        "name": "Déclencheur manuel",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "7",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 820,
        "wires": [
            [
                "c2a4ebe389672a21"
            ]
        ]
    },
    {
        "id": "89a787feeab163b6",
        "type": "inject",
        "z": "df063c9c3211a70d",
        "name": "STOP",
        "props": [
            {
                "p": "reset",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 860,
        "wires": [
            [
                "c2a4ebe389672a21",
                "50889edebdba68e2"
            ]
        ]
    },
    {
        "id": "c2a4ebe389672a21",
        "type": "trigger",
        "z": "df063c9c3211a70d",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-3",
        "extend": false,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 500,
        "y": 840,
        "wires": [
            [
                "794915052cadf5c6"
            ]
        ]
    },
    {
        "id": "2e711f93dc682b24",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "msg reset",
        "func": "// Crée un message avec la propriété reset\nreturn { reset: true };\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 720,
        "wires": [
            [
                "c2a4ebe389672a21"
            ]
        ]
    },
    {
        "id": "7699680657a9f81b",
        "type": "delay",
        "z": "df063c9c3211a70d",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1000,
        "y": 640,
        "wires": [
            [
                "c2a4ebe389672a21"
            ]
        ]
    },
    {
        "id": "794915052cadf5c6",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "QPIGS",
        "func": "msg.payload = \"wsl /home/maitrepathelin/venv/bin/mpp-solar -p /dev/ttyUSB0 -P PI30 -c QPIGS -o raw\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 840,
        "wires": [
            [
                "53c8612f9c880c31"
            ]
        ]
    },
    {
        "id": "53c8612f9c880c31",
        "type": "http request",
        "z": "df063c9c3211a70d",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "http://192.168.56.1:8020",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 970,
        "y": 840,
        "wires": [
            [
                "7fd5d23084b32067"
            ]
        ]
    },
    {
        "id": "7fd5d23084b32067",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "Fx traitement réponse v2",
        "func": "// Fonction pour extraire les valeurs de la chaîne de réponse et traiter un bloc de valeurs booléennes\nfunction extractValues(response) {\n    // Trouve le début de la chaîne de valeurs numériques\n    const start = response.indexOf('(') + 1;\n    // Détermine la fin de la chaîne de valeurs numériques\n    let end;\n    if (response.indexOf(']') > -1) {\n        end = response.indexOf(']') - 1;\n    } else if (response.indexOf('\\\\') > -1) {\n        end = response.indexOf('\\\\') - 1;\n    } else {\n        return {error: 'Format de réponse inattendu.'};\n    }\n    // Extrait la sous-chaîne contenant les valeurs\n    const valuesString = response.substring(start, end);\n    // Initialisation d'un tableau pour les valeurs séparées\n    let values = [];\n    \n    // Détecter et traiter le bloc de valeurs booléennes\n    const boolBlockStart = valuesString.search(/\\d{8}/); // Recherche la première occurrence d'un bloc de 8 chiffres\n    if (boolBlockStart !== -1) {\n        // Extraire le bloc de valeurs booléennes\n        const boolBlock = valuesString.substr(boolBlockStart, 8);\n        // Convertir chaque chiffre du bloc en booléen et l'insérer dans l'array 'values'\n        boolBlock.split('').forEach(bit => values.push(bit === '1' ? true : false));\n        // Remplacer le bloc dans la chaîne de valeurs par des espaces pour éviter de le retraiter\n        const updatedValuesString = valuesString.slice(0, boolBlockStart) + '        ' + valuesString.slice(boolBlockStart + 8);\n        // Séparer les autres valeurs en utilisant l'espace comme séparateur\n        values = [...values, ...updatedValuesString.split(' ').filter(v => v).map(value => isNaN(parseFloat(value)) ? value : parseFloat(value))];\n    } else {\n        // Si aucun bloc de valeurs booléennes n'est trouvé, traiter la chaîne comme avant\n        values = valuesString.split(' ').map(value => isNaN(parseFloat(value)) ? value : parseFloat(value));\n    }\n\n    return {payload: values};\n}\n\n// Application de la fonction d'extraction au payload reçu\nconst result = extractValues(msg.payload);\n\n// Vérifie si le résultat contient une erreur ou non\nif (result.error) {\n    return {payload: result.error, topic: \"error\"};\n} else {\n    msg.payload = result.payload;\n    return msg; // Renvoie le message avec le payload modifié\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 840,
        "wires": [
            [
                "3d0c11722cb76d16",
                "8b3e0be8260c4e83",
                "f8f947ed1592782d",
                "a4840cdbf5012883",
                "10ee2a87e6121838",
                "50327b0939be44e0",
                "1b9a83ecfc73f217",
                "8a58a7cfe13ad572",
                "13d0f32f5b22f633",
                "b4dc17e2cd3799ed",
                "77019c54941ff151",
                "c414fdc0b9ee532c",
                "e87979c245e8cf2a",
                "ffe1b2dbb6b0798b",
                "40691037fcb3400d",
                "ec452f8c02f7d613",
                "7ac01aea287d6f57",
                "e1526e81ddb1c938"
            ]
        ]
    },
    {
        "id": "3d0c11722cb76d16",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "Traitement erreur",
        "func": "let timeout; // Pour stocker la référence du délai d'attente\n\n// Vérifie si le message reçu est un message d'erreur\nif (msg.topic === \"error\") {\n    // Envoie un payload à 1 immédiatement pour indiquer une erreur\n    node.send({ payload: 1 });\n\n    // Réinitialise le délai d'attente s'il est déjà défini\n    if (timeout) clearTimeout(timeout);\n\n    // Définit un nouveau délai d'attente pour réinitialiser le payload après 20 secondes\n    //timeout = setTimeout(function () {\n    //    node.send({ payload: 0 }); // Envoie un payload à 0 après 20 secondes sans erreur\n    //}, 20000);\n} else {\n    // Si ce n'est pas un message d'erreur, ne fait rien\n    node.send({ payload: 0 }); // Envoie un payload à 0 après 20 secondes sans erreur\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 920,
        "wires": [
            [
                "651cc271daed2fcd"
            ]
        ]
    },
    {
        "id": "651cc271daed2fcd",
        "type": "ha-binary-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur erreur comm USB QPIGS",
        "entityConfig": "bf87f98f3c4cc3b3",
        "version": 0,
        "state": "payload",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1860,
        "y": 920,
        "wires": [
            [
                "418b3ea234ed2929"
            ]
        ]
    },
    {
        "id": "418b3ea234ed2929",
        "type": "debug",
        "z": "df063c9c3211a70d",
        "name": "debug Erreur comm USB QPIGS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 920,
        "wires": []
    },
    {
        "id": "8b3e0be8260c4e83",
        "type": "debug",
        "z": "df063c9c3211a70d",
        "name": "debug Résultat array QPIGS",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 1000,
        "wires": []
    },
    {
        "id": "f8f947ed1592782d",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur tension EDF entrée",
        "entityConfig": "3d20ca6e0c902940",
        "version": 0,
        "state": "payload[8]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1590,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "a4840cdbf5012883",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur tension de sortie",
        "entityConfig": "0b51a8538a8ba255",
        "version": 0,
        "state": "payload[10]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1580,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "10ee2a87e6121838",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur apparent power",
        "entityConfig": "4e6e54c4bd76f4b2",
        "version": 0,
        "state": "payload[12]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1570,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "50327b0939be44e0",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur active power",
        "entityConfig": "33b0bb135dd76389",
        "version": 0,
        "state": "payload[13]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1560,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "1b9a83ecfc73f217",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur charge totale",
        "entityConfig": "ddab84de85d61b1f",
        "version": 0,
        "state": "payload[14]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1570,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "8a58a7cfe13ad572",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur voltage batterie",
        "entityConfig": "152281401566bd2b",
        "version": 0,
        "state": "payload[16]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1570,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "13d0f32f5b22f633",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur batterie puissance de charge",
        "entityConfig": "2cf8283a700af1de",
        "version": 0,
        "state": "payload[17]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1620,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "b4dc17e2cd3799ed",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur capacité batterie",
        "entityConfig": "7aad78bf8b4a4666",
        "version": 0,
        "state": "payload[18]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1580,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "77019c54941ff151",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur température dissipateur",
        "entityConfig": "bdc12571e6e49da4",
        "version": 0,
        "state": "payload[19]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1600,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "c414fdc0b9ee532c",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur PV ampères",
        "entityConfig": "b43b146e2afd907e",
        "version": 0,
        "state": "payload[20]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1560,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "e87979c245e8cf2a",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur PV tension",
        "entityConfig": "123ca52bb26a2056",
        "version": 0,
        "state": "payload[21]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1560,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "ffe1b2dbb6b0798b",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur batterie puissance de décharge",
        "entityConfig": "1cba68596808a4a3",
        "version": 0,
        "state": "payload[23]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1620,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "40691037fcb3400d",
        "type": "ha-binary-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur recharge batterie",
        "entityConfig": "d25d8c9dc442f7da",
        "version": 0,
        "state": "payload[5]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1580,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "ec452f8c02f7d613",
        "type": "ha-binary-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur recharge batterie solaire",
        "entityConfig": "e791abfe1b25f269",
        "version": 0,
        "state": "payload[6]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1600,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "7ac01aea287d6f57",
        "type": "ha-binary-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur recharge batterie EDF",
        "entityConfig": "cf49dd01001e4642",
        "version": 0,
        "state": "payload[7]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1600,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "e1526e81ddb1c938",
        "type": "ha-sensor",
        "z": "df063c9c3211a70d",
        "name": "Onduleur PV puissance",
        "entityConfig": "e5beb08cef5f77d0",
        "version": 0,
        "state": "payload[26]",
        "stateType": "msg",
        "attributes": [],
        "inputOverride": "allow",
        "outputProperties": [],
        "x": 1570,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "37c7fdbbaa571d06",
        "type": "function",
        "z": "df063c9c3211a70d",
        "name": "Fx traitement réponse v2",
        "func": "// Fonction pour extraire les valeurs de la chaîne de réponse\nfunction extractValues(response) {\n    // Trouve le début de la chaîne de valeurs numériques\n    const start = response.indexOf('(') + 1;\n    // Détermine la fin de la chaîne de valeurs numériques\n    let end;\n    if (response.indexOf(']') > -1) {\n        // Si le caractère de fin est ']', utilisez-le pour trouver la fin\n        end = response.indexOf(']') - 1;\n    } else if (response.indexOf('\\\\') > -1) {\n        // Si le caractère de fin est '\\', utilisez-le pour trouver la fin\n        end = response.indexOf('\\\\') - 1;\n    } else {\n        // Si aucun caractère de fin attendu n'est trouvé, envoie un message d'erreur\n        return {error: 'Format de réponse inattendu.'}; // Modification ici\n    }\n    // Extrait la sous-chaîne contenant les valeurs\n    const valuesString = response.substring(start, end);\n    // Sépare les valeurs en utilisant l'espace comme séparateur\n    const values = valuesString.split(' ');\n    // Convertit chaque valeur en nombre, si possible\n    const parsedValues = values.map(value => isNaN(parseFloat(value)) ? value : parseFloat(value));\n    return {payload: parsedValues}; // Assurez-vous de retourner un objet avec une propriété payload\n}\n\n// Application de la fonction d'extraction au payload reçu\nconst result = extractValues(msg.payload);\n\n// Vérifie si le résultat contient une erreur ou non\nif (result.error) {\n    // Envoyer l'erreur à la fonction de gestion des erreurs\n    return {payload: result.error, topic: \"error\"};\n} else {\n    // Aucune erreur, envoyer le payload modifié\n    msg.payload = result.payload;\n    return msg; // Renvoie le message avec le payload modifié\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "002059ac5b744f0c",
        "type": "ha-button",
        "z": "df063c9c3211a70d",
        "name": "Onduleur set charge EDF 10A",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "e5f44620338e29fd",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "x": 130,
        "y": 280,
        "wires": [
            [
                "3c2dafd038a2d341"
            ]
        ]
    },
    {
        "id": "a97db8157593f25d",
        "type": "ha-button",
        "z": "df063c9c3211a70d",
        "name": "Onduleur set charge EDF 2A",
        "version": 0,
        "debugenabled": false,
        "outputs": 1,
        "entityConfig": "8abae31f8723b81d",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "x": 120,
        "y": 360,
        "wires": [
            [
                "8f968ca2db50e503"
            ]
        ]
    },
    {
        "id": "bd2504bd41d24d3a",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "",
        "version": "6",
        "entityType": "binary_sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Défaut de commande onduleur"
            },
            {
                "property": "icon",
                "value": "mdi:alert"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "problem"
            }
        ],
        "resend": true,
        "debugEnabled": true
    },
    {
        "id": "d49fada99457d97e",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur ampèrage charge EDF",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur ampèrage charge EDF"
            },
            {
                "property": "icon",
                "value": "mdi:power"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "current"
            },
            {
                "property": "unit_of_measurement",
                "value": "A"
            },
            {
                "property": "state_class",
                "value": ""
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "0596c020cc4a4ced",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur Stop QPIRI",
        "version": "6",
        "entityType": "button",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur Stop QPIRI"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "1be87c0da1a40936",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur Start QPIRI",
        "version": "6",
        "entityType": "button",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur Start QPIRI"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "a2c5695485b2b9d8",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur priorité de source"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "1740fd483b60c743",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur priorité de charge",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur priorité de charge"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "de49b6cfe3e8215a",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur EDF uniquement",
        "version": "6",
        "entityType": "button",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur EDF uniquement"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "c825c5f9725594e7",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur mode SBU",
        "version": "6",
        "entityType": "button",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur mode SBU"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "bf87f98f3c4cc3b3",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur Erreur comm USB",
        "version": "6",
        "entityType": "binary_sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur Erreur comm USB"
            },
            {
                "property": "icon",
                "value": "mdi:alert"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "problem"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "3d20ca6e0c902940",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur tension EDF entrée",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur tension EDF entrée"
            },
            {
                "property": "icon",
                "value": "mdi:transmission-tower-import"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "voltage"
            },
            {
                "property": "unit_of_measurement",
                "value": "V"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "0b51a8538a8ba255",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur tension de sortie",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur tension de sortie"
            },
            {
                "property": "icon",
                "value": "mdi:transmission-tower-export"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "voltage"
            },
            {
                "property": "unit_of_measurement",
                "value": "V"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "4e6e54c4bd76f4b2",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur apparent power",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur apparent power"
            },
            {
                "property": "icon",
                "value": "mdi:meter-electric"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "apparent_power"
            },
            {
                "property": "unit_of_measurement",
                "value": "VA"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "33b0bb135dd76389",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur active power",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur active power"
            },
            {
                "property": "icon",
                "value": "mdi:meter-electric-outline"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "power"
            },
            {
                "property": "unit_of_measurement",
                "value": "W"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "ddab84de85d61b1f",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur charge totale",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur charge totale"
            },
            {
                "property": "icon",
                "value": "mdi:generator-stationary"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": "%"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "152281401566bd2b",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur voltage batterie",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur voltage batterie"
            },
            {
                "property": "icon",
                "value": "mdi:home-battery"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "voltage"
            },
            {
                "property": "unit_of_measurement",
                "value": "V"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "2cf8283a700af1de",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur batterie puissance de charge",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur batterie puissance de charge"
            },
            {
                "property": "icon",
                "value": "mdi:battery-positive"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "current"
            },
            {
                "property": "unit_of_measurement",
                "value": "A"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "7aad78bf8b4a4666",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur capacité batterie",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur capacité batterie"
            },
            {
                "property": "icon",
                "value": "mdi:battery-90"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "battery"
            },
            {
                "property": "unit_of_measurement",
                "value": "%"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "bdc12571e6e49da4",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur température dissipateur",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur température dissipateur"
            },
            {
                "property": "icon",
                "value": "mdi:thermometer"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "temperature"
            },
            {
                "property": "unit_of_measurement",
                "value": "°C"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "b43b146e2afd907e",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur PV ampères",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur PV ampères"
            },
            {
                "property": "icon",
                "value": "mdi:solar-power-variant"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "current"
            },
            {
                "property": "unit_of_measurement",
                "value": "A"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "123ca52bb26a2056",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur PV tension",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur PV tension"
            },
            {
                "property": "icon",
                "value": "mdi:solar-power-variant-outline"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "voltage"
            },
            {
                "property": "unit_of_measurement",
                "value": "V"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "1cba68596808a4a3",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur batterie puissance de décharge",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur batterie puissance de décharge"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            },
            {
                "property": "state_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "d25d8c9dc442f7da",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur recharge batterie",
        "version": "6",
        "entityType": "binary_sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur recharge batterie"
            },
            {
                "property": "icon",
                "value": "mdi:battery-plus-variant"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "battery_charging"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "e791abfe1b25f269",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur recharge batterie solaire",
        "version": "6",
        "entityType": "binary_sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur recharge batterie solaire"
            },
            {
                "property": "icon",
                "value": "mdi:battery-plus-variant"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "battery_charging"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "cf49dd01001e4642",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur recharge batterie EDF",
        "version": "6",
        "entityType": "binary_sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur recharge batterie EDF"
            },
            {
                "property": "icon",
                "value": "mdi:battery-plus-variant"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "battery_charging"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "e5beb08cef5f77d0",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur PV puissance",
        "version": "6",
        "entityType": "sensor",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur PV puissance"
            },
            {
                "property": "icon",
                "value": "mdi:solar-power-variant-outline"
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": "power"
            },
            {
                "property": "unit_of_measurement",
                "value": "W"
            },
            {
                "property": "state_class",
                "value": "measurement"
            }
        ],
        "resend": true,
        "debugEnabled": false
    },
    {
        "id": "e5f44620338e29fd",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur set charge EDF 10A",
        "version": "6",
        "entityType": "button",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur set charge EDF 10A"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "8abae31f8723b81d",
        "type": "ha-entity-config",
        "server": "44866a3d.9801e4",
        "deviceConfig": "",
        "name": "Onduleur set charge EDF 2A",
        "version": "6",
        "entityType": "button",
        "haConfig": [
            {
                "property": "name",
                "value": "Onduleur set charge EDF 2A"
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "entity_picture",
                "value": ""
            },
            {
                "property": "entity_category",
                "value": ""
            },
            {
                "property": "device_class",
                "value": ""
            }
        ],
        "resend": false,
        "debugEnabled": false
    },
    {
        "id": "44866a3d.9801e4",
        "type": "server",
        "name": "Home Assistant",
        "addon": true
    }
]